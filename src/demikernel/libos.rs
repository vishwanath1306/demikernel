// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

use crate::catnip::CatnipLibos;
use libc::{
    c_int,
    sockaddr,
    socklen_t,
};
use runtime::types::{
    dmtr_qresult_t,
    dmtr_qtoken_t,
    dmtr_sgarray_t,
};

//==============================================================================
// Structures
//==============================================================================

/// Network LibOS
pub enum NetworkLibOS {
    Catnip(CatnipLibos),
}

//==============================================================================
// Associate Functions
//==============================================================================

/// Associate Functions for Network LibOSes
impl NetworkLibOS {
    pub fn new() -> NetworkLibOS {
        todo!()
    }

    pub fn socket(
        &self,
        qd_out: *mut c_int,
        domain: c_int,
        socket_type: c_int,
        protocol: c_int,
    ) -> c_int {
        todo!()
    }

    //==============================================================================
    // bind
    //==============================================================================

    fn bind(&self, qd: c_int, saddr: *const sockaddr, size: socklen_t) -> c_int {
        todo!()
    }

    //==============================================================================
    // listen
    //==============================================================================

    fn listen(&self, fd: c_int, backlog: c_int) -> c_int {
        todo!()
    }

    //==============================================================================
    // accept
    //==============================================================================

    fn accept(&self, qtok_out: *mut dmtr_qtoken_t, sockqd: c_int) -> c_int {
        todo!()
    }

    //==============================================================================
    // connect
    //==============================================================================

    fn connect(
        &self,
        qtok_out: *mut dmtr_qtoken_t,
        qd: c_int,
        saddr: *const sockaddr,
        size: socklen_t,
    ) -> c_int {
        todo!()
    }

    //==============================================================================
    // close
    //==============================================================================

    fn close(&self, qd: c_int) -> c_int {
        todo!()
    }

    //==============================================================================
    // push
    //==============================================================================

    fn push(&self, qtok_out: *mut dmtr_qtoken_t, qd: c_int, sga: *const dmtr_sgarray_t) -> c_int {
        todo!()
    }

    //==============================================================================
    // pushto
    //==============================================================================

    fn pushto(
        &self,
        qtok_out: *mut dmtr_qtoken_t,
        qd: c_int,
        sga: *const dmtr_sgarray_t,
        saddr: *const sockaddr,
        size: socklen_t,
    ) -> c_int {
        todo!()
    }

    //==============================================================================
    // pop
    //==============================================================================

    fn pop(&self, qtok_out: *mut dmtr_qtoken_t, qd: c_int) -> c_int {
        todo!()
    }

    //==============================================================================
    // poll
    //==============================================================================

    fn poll(&self, qr_out: *mut dmtr_qresult_t, qt: dmtr_qtoken_t) -> c_int {
        todo!()
    }

    //==============================================================================
    // drop
    //==============================================================================

    fn drop(&self, qt: dmtr_qtoken_t) -> c_int {
        todo!()
    }

    //==============================================================================
    // wait
    //==============================================================================

    fn wait(&self, qr_out: *mut dmtr_qresult_t, qt: dmtr_qtoken_t) -> c_int {
        todo!()
    }

    //==============================================================================
    // wait_any
    //==============================================================================

    fn wait_any(
        &self,
        qr_out: *mut dmtr_qresult_t,
        ready_offset: *mut c_int,
        qts: *mut dmtr_qtoken_t,
        num_qts: c_int,
    ) -> c_int {
        todo!()
    }

    //==============================================================================
    // sgaalloc
    //==============================================================================

    fn sgaalloc(&self, size: libc::size_t) -> dmtr_sgarray_t {
        todo!()
    }

    //==============================================================================
    // sgafree
    //==============================================================================

    fn sgafree(&self, sga: *mut dmtr_sgarray_t) -> c_int {
        todo!()
    }

    //==============================================================================
    // getsockname
    //==============================================================================

    fn getsockname(&self, _qd: c_int, _saddr: *mut sockaddr, _size: *mut socklen_t) -> c_int {
        todo!()
    }
}
